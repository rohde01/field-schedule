import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Data
times = np.array([
    3.12, 3.26, 3.61, 3.73, 3.90, 4.04, 4.20, 4.39, 4.48, 4.48,
    4.58, 4.88, 5.05, 5.24, 5.38, 5.39, 5.74, 5.85, 5.99, 6.12,
    6.28, 6.32, 6.58, 6.66, 6.94, 6.98, 7.03, 7.13, 7.37, 7.56,
    7.73, 7.82, 7.92, 8.34, 8.48, 8.77, 8.88, 9.29, 9.42, 9.75,
    9.81, 10.03, 10.23, 10.45, 10.62, 10.64, 10.93, 10.99, 11.15, 11.35,
    11.54, 11.56, 11.66, 11.80, 12.00, 12.29, 12.51, 12.66, 12.76, 13.07,
    13.13, 13.50, 13.54, 13.66, 14.59, 14.68, 15.12, 15.28, 16.07, 16.65,
    16.82, 16.85, 17.89, 19.05, 19.21, 19.83, 19.98, 20.40, 20.72, 20.85,
    21.48, 22.25, 22.63, 22.77, 22.98, 23.94, 24.24, 24.34, 24.52, 25.13,
    26.22, 26.28, 26.40, 26.48, 27.27, 27.56, 27.58, 27.58, 28.56, 28.89,
    29.77, 32.00, 32.46, 32.58, 33.29, 33.47, 34.62, 35.58, 35.99, 36.21,
    36.34, 36.45, 37.18, 39.25, 39.66, 39.98, 40.46, 42.42, 46.48, 47.51,
    47.93, 48.24, 52.28, 52.99, 57.58, 57.85, 57.97, 58.16, 59.21, 59.29,
    59.89, 60.10, 60.93, 62.62, 63.26, 63.42, 63.42, 63.43, 64.25, 64.48,
    64.48, 66.20, 66.36, 66.36, 67.86, 68.03, 74.25, 75.20, 78.96, 80.05,
    81.37, 82.08, 86.09, 86.17, 86.96, 87.71, 88.77, 91.26, 91.72, 92.58,
    93.53, 93.72, 95.64, 97.02, 102.91, 111.51
])

bests = np.array([
    11083, 11079, 11077, 10728, 10727, 10726, 10725, 10724, 10723, 10721,
    10469, 10468, 10467, 10466, 10465, 10378, 10377, 10165, 10163, 10062,
    10061, 10060, 10059, 10058, 10057, 10050, 9859, 9755, 9750, 9746,
    9743, 9742, 9732, 9722, 9720, 9719, 9715, 9704, 9696, 9695,
    9694, 9693, 9560, 9495, 9494, 9453, 9395, 9394, 9393, 9392,
    9391, 9361, 9260, 9246, 9245, 9244, 9243, 9242, 9146, 9145,
    9144, 9143, 9033, 9024, 9022, 9017, 9016, 8922, 8919, 8914,
    8912, 8811, 8714, 8667, 8656, 8651, 8644, 8639, 8637, 8632,
    8623, 8432, 8429, 8427, 8335, 8251, 8250, 8249, 8241, 8234,
    8229, 8228, 8227, 8226, 8218, 8216, 8215, 8213, 8212, 8211,
    8204, 8203, 8202, 8201, 8200, 8199, 8196, 8195, 8193, 8188,
    8187, 8186, 8001, 8000, 7998, 7899, 7898, 7893, 7892, 7890,
    7889, 7888, 7803, 7800, 7797, 7792, 7790, 7702, 7696, 7694,
    7691, 7690, 7602, 7600, 7599, 7598, 7593, 7592, 7591, 7503,
    7502, 7500, 7499, 7497, 7493, 7485, 7484, 7483, 7481, 7402,
    7395, 7393, 7392, 7391, 7389, 7388, 7387, 7384, 7383, 7382,
    7381, 7380, 7378, 7377, 7376, 7375
])

# Beregn gains
initial_best = bests[0]
gains = initial_best - bests

# Logaritmisk funktion
def log_func(t, a, b):
    return a * np.log(t) + b

# Fit log-funktionen
popt, _ = curve_fit(log_func, times, gains)

# Generer glatte x-værdier og tilhørende forudsagte y-værdier
t_fit = np.linspace(min(times), max(times), 200)
g_fit = log_func(t_fit, *popt)

# Plot
plt.figure(figsize=(8, 5))
plt.scatter(times, gains, color='blue', label='Data', s=30)
plt.plot(
    t_fit,
    g_fit,
    color='red',
    label=f'Log fit: a·log(t)+b\n a={popt[0]:.2f}, b={popt[1]:.2f}'
)
plt.xlabel('Time (s)')
plt.ylabel('Objective Gain')
plt.title('Logarithmic Regression: Objective Gain over Time')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
